// Generated by gencpp from file occ_predictor_msgs/PredictPCLResponse.msg
// DO NOT EDIT!


#ifndef OCC_PREDICTOR_MSGS_MESSAGE_PREDICTPCLRESPONSE_H
#define OCC_PREDICTOR_MSGS_MESSAGE_PREDICTPCLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace occ_predictor_msgs
{
template <class ContainerAllocator>
struct PredictPCLResponse_
{
  typedef PredictPCLResponse_<ContainerAllocator> Type;

  PredictPCLResponse_()
    : pred()  {
    }
  PredictPCLResponse_(const ContainerAllocator& _alloc)
    : pred(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pred_type;
  _pred_type pred;





  typedef boost::shared_ptr< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PredictPCLResponse_

typedef ::occ_predictor_msgs::PredictPCLResponse_<std::allocator<void> > PredictPCLResponse;

typedef boost::shared_ptr< ::occ_predictor_msgs::PredictPCLResponse > PredictPCLResponsePtr;
typedef boost::shared_ptr< ::occ_predictor_msgs::PredictPCLResponse const> PredictPCLResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator1> & lhs, const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pred == rhs.pred;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator1> & lhs, const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace occ_predictor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e39840a6a983f2fa02ea00b2129e3ef6";
  }

  static const char* value(const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe39840a6a983f2faULL;
  static const uint64_t static_value2 = 0x02ea00b2129e3ef6ULL;
};

template<class ContainerAllocator>
struct DataType< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "occ_predictor_msgs/PredictPCLResponse";
  }

  static const char* value(const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pred\n"
;
  }

  static const char* value(const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pred);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictPCLResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::occ_predictor_msgs::PredictPCLResponse_<ContainerAllocator>& v)
  {
    s << indent << "pred[]" << std::endl;
    for (size_t i = 0; i < v.pred.size(); ++i)
    {
      s << indent << "  pred[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pred[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCC_PREDICTOR_MSGS_MESSAGE_PREDICTPCLRESPONSE_H
